* Primordial history of editors

** teco

   Dan Murphy released =TECO= in *1962* for the [[https://en.wikipedia.org/wiki/PDP-5][PDP-5]] (the world's first _12 bit_ computer).
   =TECO= is not just an editor, but also a _syntax-less imperative programming language_ with *macro support*.

   - TECO :: [paper] Tape Editor and COrrector
   - TECO :: Text Editor and COrrector
   - TECO :: Text Editor Character Oriented

** qed

   *Berkeley* =qed= was character oriented whilst *MIT* =qed= was line oriented.
   Both supported multiple buffers, copy, paste, search, and replace.
   Used for scripting and had *macro* support.

   - Berkeley =qed= :: Lampson and Deutsch wrote for Berkely time-sharing system on the [[https://en.wikipedia.org/wiki/SDS_940][SDS 940 mainframe]] and published in [[https://cacm.acm.org/magazines/1967][1967 December Communications of the ACM]]
   - MIT =qed= :: Ken Thompson wrote for MIT CTSS in IBM 7090 assembly, *introducing regular expressions*, published in the [[https://cacm.acm.org/magazines/1968][1968 June Communications of the ACM]], awarded =US Patent #3568156=
   - Bell Labs =qed= :: Dennis Ritchie wrote for GE-TSS in assembly with fancy (complicated) regular expression support, published in the [[https://www.bell-labs.com/usr/dmr/www/qedman.pdf][1970 June manpage memo]]
   - Bell Labs =bqed= :: Jay Michlin wrote for IBM TSO in *1973* and released to the public by *1974*

* Early evolution of editors

** ed

   Ken Thompson, originally in *1969*, wrote =ed=, [[https://www.gnu.org/fun/jokes/ed-msg.html][ed is the stanard editor]], for the [[https://en.wikipedia.org/wiki/PDP-7][PDP-7 minicomputer]] along with =as=, the assembler, and =sh=, the shell.
   This simplified things by dispensing with advanced regular expression features and multiple buffers.
   Later versions would be written by Ritchie in the _high level_ programming language =C=.

** emacs

   Carl Mikkelson in *1972* produced the first collection of =TECO= EDitor MACroS.

** vi

   Bill Joy in *1976* wrote =vi=, bringing a visual mode based on =em= to =ed=.

** ex

   #+CAPTION: Dennis Ritchie on vi
   #+BEGIN_QUOTE
   The same program, under the name ex, works better on typewriter-like terminals; aside from some fancier commands and better diagnostics, it's essentially ed.
   #+END_QUOTE

* Historical References

** [[https://www.bell-labs.com/usr/dmr/www/qed.html][An incomplete history of the QED Text Editor]] :dennis:ritchie:unix:history:qed:ed:vi:
** [[http://www.catb.org/esr/writings/taoup/html/ch13s02.html][The Art of Unix Programming :: A Tale of Five Editors]] :eric:raymond:book:unix:programming:editors:
** [[http://www.linfo.org/vi/history.html][Bellevue Linux Users Group :: Linux Info :: How to Use Vi :: History]] :linux:history:vi:

* History of emacs

** Who

   - Carl Mikkelson :: added display-editing to teco.
   - Richard Stallman :: added macro capabilities to teco.
   - Richard Stallman :: collected the first group of teco programs.
   - Eugene Ciccarelli :: wrote the first introduction to emacs.

** What

   Emacs was based on teco, an editor for the ITS at MIT's AI lab. and "E"ditor "MAC"ros.

   The machines in question were mainframes and other large machines with shared time access.

** When

   - Mikkelson  :: 1972
   - Stallman   :: 1974
   - Stallman   :: 1976
   - Ciccarelli :: 1978

** Where

   MIT's AI lab (SAIL)

** Why

   Why not?



** Pictars

   Serious hardware runs emacs in microcode on the processor: [[./images/symbolics-lisp-machine-poster.jpg][Lisp Machine Poster]]

   The [[./images/space-cadet-keyboard.jpg][Space Cadet Keyboard]] had quite a few interesting keys and modifiers.

   [[./images/symbolics-lisp-nerd.jpg][This nerd]] is representative of the community using them.

   Emacs can be used for [[./images/emacs-video-editing.png][video editing]] in a graphical environment.

   Traditional [[./images/emacs-c-ide.jpg][C IDEs]] can be emulated in emacs as well, with integrated debugging, source control, etc.

   Datadog released [[./images/datadog-mode.png][Datadog Mode]] for monitoring datadog alert streams in emacs.

* Basic editing commands and common keybindings
** Start emacs with `emacs` or `emacs -nw` for non-windowed mode

   Emacs can run in a terminal or graphical windowed environment.

   Emacs tutorial can be entered with:

   - C-h t :: Start to tutorial
   - "C-c" :: hold CONTROL and press "c"
   - "C-x" :: to hold CONTROL and press "x"
   - "M-x" :: to hold META and "x" or press ESCAPE then "x"

   Remember the [[./images/space-cadet-keyboard.jpg][Space Cadet Keyboard]].

   Keep a list of 5-10 commands you are learning and work on them only.

** Early useful keybindings to choose from

   - =C-x C-c= :: Quit
   - =C-x C-f= :: Open file
   - =C-x k=   :: Kill buffer (close it)
   - =C-x C-s= :: Save current buffer
   - =C-x s=   :: Save dirty buffers
   - =C-x b=   :: Switch buffers
   - =M-x=     :: Run emacs lisp function
   - =C-g=     :: "Quit" current command, spam if troubled
   - =C-x C-e= :: Evaluate lisp expression before cursor

* Windows, buffers, and rings
** Windowing commands

   These are commands that deal with managing or creating windows in emacs

   - =C-x o= :: "Other" window
   - =C-x 0= :: Destroy window
   - =C-x 1= :: Destroy other windows
   - =C-x 2= :: Horizontal split window
   - =C-x 3= :: Vertical split window

** Window commands

   These are commands for working within a window in emacs

   - =C-a= :: Beginning of line
   - =C-e= :: End of line
   - =C-v= :: Scroll page down
   - =M-v= :: Scroll page up
   - =M-<= :: Top of buffer (meta+shift+',')
   - =M->= :: End of buffer (meta+shift+'.')
   - =C-l= :: Arrange buffer centered on line or top on line
   - =C-s= :: Search forward incremental
   - =C-r= :: Search reverse incremental

** Editing commands

   These are commands for working with buffers and rings.
   Copied and cut text goes into the kill ring.
   Actions for undoing are also stored in a ring.

   - =C-SPACE= :: Set Mark (begin selection)
   - =C-w=     :: Cut text
   - =M-w=     :: Copy text
   - =C-y=     :: Paste or "yank"
   - =C-k=     :: Cut ("kill") from cursor to end of line
   - =C-x u=   :: Undo

* Macros and elisp

  ELISP code can be written and executed in any buffer.  Keyboard macros can be saved in configuration as emacs-lisp with special syntax.

** Keyboard macros

   - =C-x (= :: Start keyboard macro
   - =C-x )= :: End keyboard macro
   - =C-x e= :: Execute keyboard macro

** ELISP

   - =C-x C-e= :: Execute elisp expression before cursor
   - =M-= :: Read a single emacs list expression in minibuffer and evaluate it
* Configuration files

  Emacs is configured with emacs-lisp code in the ".emacs" file.

  Steve Yegge's blog posts on Emacs and its configuration are very useful and were the original guide for my example configuration in [[./dotemacs/]]

* Emacs package management

  Emacs, since version 24, comes with ELPA the Emacs Lisp Package Archive support.

  You can use the package manager by executing `M-x list-packages` and then searching and selecting packages for install.

  There are multiple repositories of packages available which can extend the packages available to you, but require manual installation.

* Tour of Modes including but not limited to:
** Games and toys

   Such as =M-x dunnet=, =M-x keywiz=, =M-x snake=, =M-x tetris=, and =M-x butterfly= ([[https://xkcd.com/378/][butterfly]]).

*** [[https://github.com/tkf/org-mode/blob/master/contrib/lisp/org-sudoku.el][org-sudoku]]

    - =M-x org-sudoku-create= :: Create a sudoku board in an org-mode file
    - =M-x org-sudoku-solve= :: Solve an org-mode sudoku board

*** [[https://www.emacswiki.org/emacs/CategoryGames][EmacsWiki :: CategoryGames]] :emacs:wiki:games:and:amusements:
*** [[https://www.masteringemacs.org/article/fun-games-in-emacs][Mastering Emacs :: Fun and Games in Emacs]] :mastering:emacs:fun:and:games:

** artist-mode

   Draw pretty pictures in emacs!  Use =M-x artist-mode=

** C-mode, python-mode, lisp-mode, etc

   Various programming language syntax highlighting and indention modes.

** directory editor (aka, dired)

   Manage directories and permissions from within emacs.

** man and info

   Read system man and info pages in emacs.

** org-mode for organization and presentation

   Outlining taken to the extreme providing wiki-like and productivity related functionality to emacs including task lists and time tracking.

   Refer to the [[http://orgmode.org/manual/][Org-mode Manual]] on the [[http://orgmode.org/][Org-mode website]].

   Check out the [[http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html][Org-mode TODO tutorial]] as well.

** shell and remote access modes

*** Shell mode commands

    - =C-c C-j= :: Line unbound mode, so that you can scroll around the buffer like any other text buffer
    - =C-c C-k= :: Bind back to the shell such that up/down/left/right, etc are read by the shell not emacs

   Emacs can use TRAMP mode to open files on remote machines over various protocols, even as root with sudo or other users.

   ... WHEN IT WORKS?!


** full IDE modes (specifically, SLIME)

   Face down, code up.
